legend("topright", legend=c("data density", "logistic","normal","exponential","poisson", "weibull","log-normal"),
col=c("black","red","blue","chartreuse4","chocolate4","darkorange2","cyan3"),
lty=c(2,1,1,1,1,1,1), lwd=c(2,2,2,2,2,2,2))
pairs(AB)
plot(AB$a, AB$b, pch=20)
cor(AB)
smoothScatter(AB$a, AB$b)
scatterBarNorm <- function(x, dcol="blue", lhist=20, num.dnorm=5*lhist, ...){
## check input
stopifnot(ncol(x)==2)
## set up layout and graphical parameters
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
ospc <- 0.5 # outer space
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
par. <- par(mar=c(pext, pext, bspc, bspc),
oma=rep(ospc, 4)) # plot parameters
## scatter plot
plot(x, xlim=range(x[,1]), ylim=range(x[,2]), ...)
## 3) determine barplot and height parameter
## histogram (for barplot-ting the density)
xhist <- hist(x[,1], plot=FALSE, breaks=seq(from=min(x[,1]), to=max(x[,1]),
length.out=lhist))
yhist <- hist(x[,2], plot=FALSE, breaks=seq(from=min(x[,2]), to=max(x[,2]),
length.out=lhist)) # note: this uses probability=TRUE
## determine the plot range and all the things needed for the barplots and lines
xx <- seq(min(x[,1]), max(x[,1]), length.out=num.dnorm) # evaluation points for the overlaid density
xy <- dnorm(xx, mean=mean(x[,1]), sd=sd(x[,1])) # density points
yx <- seq(min(x[,2]), max(x[,2]), length.out=num.dnorm)
yy <- dnorm(yx, mean=mean(x[,2]), sd=sd(x[,2]))
## barplot and line for x (top)
par(mar=c(0, pext, 0, 0))
barplot(xhist$density, axes=FALSE, ylim=c(0, max(xhist$density, xy)),
space=0) # barplot
lines(seq(from=0, to=lhist-1, length.out=num.dnorm), xy, col=dcol) # line
## barplot and line for y (right)
par(mar=c(pext, 0, 0, 0))
barplot(yhist$density, axes=FALSE, xlim=c(0, max(yhist$density, yy)),
space=0, horiz=TRUE) # barplot
lines(yy, seq(from=0, to=lhist-1, length.out=num.dnorm), col=dcol) # line
## restore parameters
par(par.)
}
require(mvtnorm)
help(rmvnorm)
X <- rmvnorm(1000, c(mean(AB$a), mean(AB$b)), cov(AB), 2, 2))
X <- rmvnorm(1000, c(mean(AB$a), mean(AB$b)), cov(AB), 2, 2)
X <- rmvnorm(x=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB))
X <- rmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB))
scatterBarNorm(X, xlab=expression(italic(X[1])), ylab=expression(italic(X[2])))
scatterBarNorm(X, xlab=expression(italic(X[1])), ylab=expression(italic(X[2])),pch=20)
points(AB$a, AB$b)
points(AB$a, AB$b, col="red")
dev.off()
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
ospc <- 0.5 # outer space
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
par. <- par(mar=c(pext, pext, bspc, bspc),
oma=rep(ospc, 4)) # plot parameters
## scatter plot
X <- rmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB))
plot(X)
dev.off()
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
ospc <- 0.5 # outer space
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
par. <- par(mar=c(pext, pext, bspc, bspc),
oma=rep(ospc, 4)) # plot parameters
## scatter plot
plot(rmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), pch=20)
plot(AB$a, AB$b)
## set up layout and graphical parameters
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
ospc <- 0.5 # outer space
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
par. <- par(mar=c(pext, pext, bspc, bspc),
oma=rep(ospc, 4)) # plot parameters
## scatter plot
xlabel <- expression(beta[1]~Value)
ylabel <- expression(beta[2]~Value)
plot(rmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), pch=20, xlab=xlabel, ylab=ylabel)
plot(AB$a, AB$b)
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
ospc <- 0.5 # outer space
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
par. <- par(mar=c(pext, pext, bspc, bspc),
oma=rep(ospc, 4)) # plot parameters
## scatter plot
xlabel <- expression(beta[1]~Value)
ylabel <- expression(beta[2]~Value)
plot(rmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), pch=20, xlab=xlabel, ylab=ylabel)
points(AB$a, AB$b)
points(AB$a, AB$b, col="red", bg="red")
points(AB$a, AB$b, pch=21,col="red", bg="red")
help(trmvnorm)
require(tmvtnorm)
plot(tmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), pch=20, xlab=xlabel, ylab=ylabel)
plot(tmvtnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), pch=20, xlab=xlabel, ylab=ylabel)
summary(AB)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), lower=c(0,0), upper=c(182,1.3)
pch=20, xlab=xlabel, ylab=ylabel)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB)), lower=c(0,0), upper=c(182,1.3),
pch=20, xlab=xlabel, ylab=ylabel)
warnings()
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=20, xlab=xlabel, ylab=ylabel)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=., xlab=xlabel, ylab=ylabel)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=".", xlab=xlabel, ylab=ylabel)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=20, xlab=xlabel, ylab=ylabel)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=20, xlab=xlabel, ylab=ylabel, col="grey50")
points(AB$a, AB$b, pch=21,col="red", bg="red")
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
ospc <- 0.5 # outer space
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
par. <- par(mar=c(pext, pext, bspc, bspc),
oma=rep(ospc, 4)) # plot parameters
## scatter plot
xlabel <- expression(beta[1]~Value)
ylabel <- expression(beta[2]~Value)
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=20, xlab=xlabel, ylab=ylabel, col="grey50")
points(AB$a, AB$b, pch=21,col="red", bg="red")
xhist <- hist(AB$a)
layMat <- matrix(c(2,0,1,3), ncol=2, byrow=TRUE)
layout(layMat, widths=c(5/7, 2/7), heights=c(2/7, 5/7))
pext <- 4 # par extension down and to the left
bspc <- 1 # space between scatter plot and bar plots
oma=rep(ospc, 4)) # plot parameters
xlabel <- expression(beta[1]~Value)
ylabel <- expression(beta[2]~Value)
ospc <- 0.5 # outer space
plot(rtmvnorm(n=1000, mean=c(mean(AB$a), mean(AB$b)), sigma=cov(AB), lower=c(0,0), upper=c(182,1.3)),
pch=20, xlab=xlabel, ylab=ylabel, col="grey50")
points(AB$a, AB$b, pch=21,col="red", bg="red")
## 3) determine barplot and height parameter
## histogram (for barplot-ting the density)
xhist <- hist(AB$a, main="")
yhist <- hist(x[,2], plot=FALSE, breaks=seq(from=min(x[,2]), to=max(x[,2]),
par. <- par(mar=c(pext, pext, bspc, bspc),
## scatter plot
xhist <- hist(AB$a, plot=FALSE, freq=FALSE)
xhist <- hist(AB$a, plot=FALSE)
yhist <- hist(AB$b, plot=FALSE)
## determine the plot range and all the things needed for the barplots and lines
xx <- seq(min(x[,1]), max(x[,1]), length.out=num.dnorm) # evaluation points for the overlaid density
xx <- seq(min(AB$a), max(AB$a), length.out=num.dnorm) # evaluation points for the overlaid density
xhist <- hist(AB$a, plot=FALSE, breaks=seq(from=min(x[,1]), to=max(x[,1]),
length.out=lhist))
xhist <- hist(AB$a, plot=FALSE, breaks=seq(from=min(AB$a), to=max(AB$a),
length.out=lhist))
read.csv
d
d <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
head(d)
names(d)
data <- d$t.in
data <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
data <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
data <- d$t.in
data <- data$t.in
data
data <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
d <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
data <- sample(d$t.in, 50)
data
hist(data)
rug(data)
names(d)
d <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
data <- sample(d$q.in, 50)
hist(data)
rug(data)
lines(density(data))
d <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
data <- sample(d$q.in, 50)
require(fitdistrplus)
require(nlstools)
require(reshape2)
require(MASS)
require(qpcR)
fitData <- function(data, fit="gamma", sample=0.5){
distrib = list()
numfit <- length(fit)
results = matrix(0, ncol=5, nrow=numfit)
for(i in 1:numfit){
if((fit[i] == "gamma") |
(fit[i] == "poisson") |
(fit[i] == "weibull") |
(fit[i] == "exponential") |
(fit[i] == "logistic") |
(fit[i] == "normal") |
(fit[i] == "geometric") |
(fit[i] == "lognormal")
)
distrib[[i]] = fit[i]
else stop("Provide a valid distribution to fit data" )
}
# take a sample of dataset
n = round(length(data)*sample)
data = sample(data, size=n, replace=F)
for(i in 1:numfit) {
if(distrib[[i]] == "gamma") {
gf_shape = "gamma"
fd_g <- fitdistr(data, "gamma")
est_shape = fd_g$estimate[[1]]
est_rate = fd_g$estimate[[2]]
ks = ks.test(data, "pgamma", shape=est_shape, rate=est_rate)
# add to results
results[i,] = c(gf_shape, est_shape, est_rate, ks$statistic, ks$p.value)
}
else if(distrib[[i]] == "poisson"){
gf_shape = "poisson"
fd_p <- fitdistr(data, "poisson")
est_lambda = fd_p$estimate[[1]]
ks = ks.test(data, "ppois", lambda=est_lambda)
# add to results
results[i,] = c(gf_shape, est_lambda, "NA", ks$statistic, ks$p.value)
}
else if(distrib[[i]] == "weibull"){
gf_shape = "weibull"
fd_w <- fitdistr(data,densfun=dweibull,start=list(scale=1,shape=2))
est_shape = fd_w$estimate[[1]]
est_scale = fd_w$estimate[[2]]
ks = ks.test(data, "pweibull", shape=est_shape, scale=est_scale)
# add to results
results[i,] = c(gf_shape, est_shape, est_scale, ks$statistic, ks$p.value)
}
else if(distrib[[i]] == "normal"){
gf_shape = "normal"
fd_n <- fitdistr(data, "normal")
est_mean = fd_n$estimate[[1]]
est_sd = fd_n$estimate[[2]]
ks = ks.test(data, "pnorm", mean=est_mean, sd=est_sd)
# add to results
results[i,] = c(gf_shape, est_mean, est_sd, ks$statistic, ks$p.value)
}
else if(distrib[[i]] == "exponential"){
gf_shape = "exponential"
fd_e <- fitdistr(data, "exponential")
est_rate = fd_e$estimate[[1]]
ks = ks.test(data, "pexp", rate=est_rate)
# add to results
results[i,] = c(gf_shape, est_rate, "NA", ks$statistic, ks$p.value)
}
else if(distrib[[i]] == "logistic"){
gf_shape = "logistic"
fd_l <- fitdistr(data, "logistic")
est_location = fd_l$estimate[[1]]
est_scale = fd_l$estimate[[2]]
ks = ks.test(data, "plogis", location=est_location, scale=est_scale)
# add to results
results[i,] = c(gf_shape, est_location, est_scale, ks$statistic, ks$p.value)
}
else if(distrib[[i]] == "lognormal"){
gf_shape = "lognormal"
fd_l <- fitdistr(data, "lognormal")
est_meanlog = fd_l$estimate[[1]]
est_sdlog = fd_l$estimate[[2]]
ks = ks.test(data, "plnorm", meanlog=est_meanlog, sdlog=est_sdlog)
# add to results
results[i,] = c(gf_shape, est_meanlog, est_sdlog, ks$statistic, ks$p.value)
}
}
results = rbind(c("distribution", "param1", "param2", "ks stat", "ks pvalue"), results)
#print(results)
return(results)
}
dtrunc <- function(x, spec, a = -Inf, b = Inf, ...)
{
tt <- rep(0, length(x))
g <- get(paste("d", spec, sep = ""), mode = "function")
G <- get(paste("p", spec, sep = ""), mode = "function")
tt[x>=a & x<=b] <- g(x[x>=a&x<=b], ...)/(G(b, ...) - G(a, ...))
return(tt)
}
qtrunc <- function(p, spec, a = -Inf, b = Inf, ...)
{
tt <- p
G <- get(paste("p", spec, sep = ""), mode = "function")
Gin <- get(paste("q", spec, sep = ""), mode = "function")
tt <- Gin(G(a, ...) + p*(G(b, ...) - G(a, ...)), ...)
return(tt)
}
rtrunc <- function(n, spec, a = -Inf, b = Inf, ...)
{
x <- u <- runif(n, min = 0, max = 1)
x <- qtrunc(u, spec, a = a, b = b,...)
return(x)
}
d <- read.csv("C:\\Thesis\\LARB\\03 Thesis-Calcs\\4 Output Se Flux\\USR Input\\USRvar.csv")
data <- sample(d$q.in, 50)
res = fitData(data, fit=c("logistic", "normal", "exponential", "poisson", "weibull", "lognormal"), sample=1)
res #view the data set to choose the best fit
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,250), ylim=c(0,0.025), main="", xlab=expression(USR~beta[1]~Values))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.25), main="", xlab=expression(USR~beta[1]~Values))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.05), main="", xlab=expression(USR~beta[1]~Values))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(USR~beta[1]~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
#dev.off()
res
AFit <- c(as.numeric(res[3,2]), as.numeric(res[3,3]))
fittest <- dtrunc(rng, "norm", a=0, location=AFit[[1]], scale=AFit[[2]])
fittest <- dtrunc(rng, "norm", a=0, mean=AFit[[1]], sd=AFit[[2]])
Arandom <- rtrunc(5000, "norm", a=0, mean=AFit[[1]], sd=AFit[[2]])
#pdf("USR B1 Dist Check.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="red")
lines(rng,fittest, lwd=2, col="blue")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="blue")
legend("topright", legend=c("data density", "truncated logistic","random truncated logistic"),
col=c("black","red","red"),
lty=c(2,1,2), lwd=c(2,2,2))
#pdf("USR B1 Dist Check.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="blue")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="blue")
legend("topright", legend=c("data density", "truncated normal","random truncated normal"),
col=c("black","red","red"),
lty=c(2,1,2), lwd=c(2,2,2))
#dev.off()
legend("topright", legend=c("data density", "truncated normal","random truncated normal"),
col=c("black","blue","blue"),
lty=c(2,1,2), lwd=c(2,2,2))
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
#dev.off()
res
help(dlnrom)
help(dlnorm)
AFit <- c(as.numeric(res[7,2]), as.numeric(res[7,3]))
fittest <- dtrunc(rng, "lnorm", a=0, meanlog=AFit[[1]], sdlog=AFit[[2]])
Arandom <- rtrunc(5000, "lnorm", a=0, meanlog=AFit[[1]], sdlog=AFit[[2]])
#pdf("USR B1 Dist Check.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="blue")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="blue")
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="cyan3")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="cyan3")
legend("topright", legend=c("data density", "log-normal","random log-normal"),
col=c("black","cyan3","cyan3"),
lty=c(2,1,2), lwd=c(2,2,2))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.10), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="cyan3")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="cyan3")
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.08), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="cyan3")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="cyan3")
legend("topright", legend=c("data density", "log-normal","random log-normal"),
col=c("black","cyan3","cyan3"),
lty=c(2,1,2), lwd=c(2,2,2))
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.08), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
setwd("C:\\Thesis\\Thesis\\Figures\\")
pdf("Example Distribution Analysis.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.08), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
dev.off()
AFit <- c(as.numeric(res[7,2]), as.numeric(res[7,3]))
fittest <- dtrunc(rng, "lnorm", a=0, meanlog=AFit[[1]], sdlog=AFit[[2]])
Arandom <- rtrunc(5000, "lnorm", a=0, meanlog=AFit[[1]], sdlog=AFit[[2]])
pdf("Example Distribution Check.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.08), main="", xlab=expression(Measured~Values))
rug(data)
lines(density(data, bw="SJ"), lwd=2, lty=2)
lines(rng,fittest, lwd=2, col="cyan3")
lines(density(Arandom, bw="SJ"), lwd=2, lty=2, col="cyan3")
legend("topright", legend=c("data density", "log-normal","random log-normal"),
col=c("black","cyan3","cyan3"),
lty=c(2,1,2), lwd=c(2,2,2))
dev.off()
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.08), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
setwd("C:\\Thesis\\Thesis\\Figures\\")
pdf("Example KDE.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=2)
#lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
#lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
#lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
#lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
#lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
#legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
#       col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
#       lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
dev.off()
setwd("C:\\Thesis\\Thesis\\Figures\\")
pdf("Example KDE.pdf", width=6, height=6, family="Times")
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=1)
#lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
#lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
#lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
#lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
#lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
#legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
#       col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
#       lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
dev.off()
par(mar=c(5.1,4.1,1.1,1.1))
hist(data, freq=FALSE, xlim=c(0,100), ylim=c(0,0.06), main="", xlab=expression(Measured~Values))
rug(data)
rng <- seq(0,100,0.01)
lines(density(data, bw="SJ"), lwd=2, lty=1)
#lines(rng, dlogis(rng, as.numeric(res[2,2]), as.numeric(res[2,3])), col="red", lwd=2)
#lines(rng, dnorm(rng, as.numeric(res[3,2]), as.numeric(res[3,3])), col="blue", lwd=2)
#lines(rng, dexp(rng, as.numeric(res[4,2])), col="Chartreuse4", lwd=2)
#lines(rng, dweibull(rng, as.numeric(res[6,2]), as.numeric(res[6,3])), col="darkorange2", lwd=2)
#lines(rng, dlnorm(rng, as.numeric(res[7,2]), as.numeric(res[7,3])), col="cyan3", lwd=2)
#legend("topright", legend=c("data density", "logistic","normal","exponential", "weibull","log-normal"),
#       col=c("black","red","blue","chartreuse4","darkorange2","cyan3"),
#       lty=c(2,1,1,1,1,1), lwd=c(2,2,2,2,2,2))
